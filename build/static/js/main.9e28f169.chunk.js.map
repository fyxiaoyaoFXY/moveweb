{"version":3,"sources":["ShowTime.js","ToDolist/Todoing.js","ToDolist/Todoinput.js","ToDolist/Todolist.js","index.js"],"names":["React","Component","Todoing","todo","this","props","map","item","idx","key","onClick","e","del","defaultProps","Todoinput","handleInput","keyCode","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","console","log","refs","focus","ref","inp","onChange","input","onKeyDown","type","Todolist","addItem","data","delItem","splice","ReactDOM","render","document","getElementById"],"mappings":"4NAEuBA,IAAMC,U,MCARC,E,iLACP,IAAD,OACAC,EAAQC,KAAKC,MAAbF,KACL,OACI,4BAEQA,EAAKG,KAAI,SAACC,EAAKC,GAAN,OACT,wBAAIC,IAAKD,GACJD,EADL,MACa,4BAAQG,QAAS,SAACC,GAAD,OAAK,EAAKN,MAAMO,IAAIJ,EAAIG,KAAzC,yB,GARIV,aAqBrCC,EAAQW,aAAe,CACnBV,KAAK,CAAC,EAAE,EAAE,EAAE,I,mBCrBKW,E,YACjB,aAAc,IAAD,8BACT,+CAeJC,YAAc,SAACJ,GAEM,KAAdA,EAAEK,SAED,EAAKX,MAAMY,IAAIN,EAAEO,OAAOC,QApBnB,EAuBbC,aAAe,SAACT,GACZ,EAAKU,SAAL,eAEKV,EAAEO,OAAOI,KAAMC,SAA0B,KAAjBZ,EAAEO,OAAOC,MAAW,EAAER,EAAEO,OAAOC,UAxB5D,EAAKJ,YAAc,EAAKA,YAAYS,KAAjB,gBACnB,EAAKC,MAAM,CACPC,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,iFA+BTC,QAAQC,IAAI1B,KAAK2B,KAAKL,GACtBtB,KAAKsB,EAAEM,U,+BAGD,IAAD,OACL,OACI,6BAEI,2BAAOV,KAAK,IAAIW,IAAK,SAACC,GAAO,EAAKR,EAAEQ,GAAMC,SAAU/B,KAAKgB,aAAcD,MAAOf,KAAKqB,MAAMW,MAAOC,UAAWjC,KAAKW,YAAauB,KAAK,SAFtI,IAII,2BAAOhB,KAAK,IAAIa,SAAU/B,KAAKgB,aAAcD,MAAOf,KAAKqB,MAAMW,MAAOC,UAAWjC,KAAKW,YAAauB,KAAK,SAJ5G,IAMI,2BAAOhB,KAAK,IAAIa,SAAU/B,KAAKgB,aAAcD,MAAOf,KAAKqB,MAAMW,MAAOC,UAAWjC,KAAKW,YAAauB,KAAK,SACxG,2BAAIlC,KAAKqB,MAAMC,EAAEtB,KAAKqB,MAAME,EAAEvB,KAAKqB,MAAMG,GAGzC,2BAAOK,IAAK,SAACC,GAAO,EAAKA,IAAIA,GAAMI,KAAK,SACxC,4BAAQ5B,QAAS,WAAKmB,QAAQC,IAAI,EAAKI,IAAIf,SAA3C,qB,GAjDuBlB,aCAlBsC,E,YACjB,aAAc,IAAD,8BACT,+CAOJC,QAAU,SAACC,GAEP,EAAKpB,SAAS,CACVlB,KAAK,GAAD,mBAAK,EAAKsB,MAAMtB,MAAhB,CAAqBsC,OAXpB,EAcbC,QAAU,SAAClC,GA6BC,YAAO,EAAKiB,MAAMtB,MACrBwC,OAAOnC,EAAI,IA1ChB,EAAKiB,MAAM,CACPtB,KAAK,CAAC,EAAE,EAAE,GACVuB,EAAE,IACFC,EAAE,KALG,E,sEAgET,OACI,6BACI,kBAAC,EAAD,CAASxB,KAAMC,KAAKqB,MAAMtB,KAAMS,IAAKR,KAAKsC,UAC1C,kBAAC,EAAD,CAAWzB,IAAKb,KAAKoC,e,GApECvC,aCStC2C,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.9e28f169.chunk.js","sourcesContent":["import React,{Fragment,Component} from 'react';\r\n//类定义组件\r\nclass ShowTime extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            time:new Date().toLocaleString(),\r\n            a:100,\r\n            b:200\r\n        }\r\n        setTimeout(()=>\r\n        {\r\n            this.setState({           \r\n                time:new Date().toLocaleString()\r\n            });\r\n        },1000)\r\n    }  \r\n    shouldComponentUpdate(){\r\n        if(this.state.a>10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    componentDidUpdate(preProps,preState,data){\r\n        console.log('didupdate');\r\n        console.log(preProps,preState);\r\n        console.log(this.state.time);\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getSnapshot');\r\n        return{name:this.state.a};\r\n    }\r\n    render(){\r\n        var {name,age} = this.props;\r\n        return(\r\n            <Fragment>\r\n                {/*条件渲染 */}\r\n                {name.length>5?<div>姓名：{name}</div>:''}\r\n                {name.length>5&&<div>姓名：{name}</div>}\r\n                <div>{this.state.time}</div>\r\n                <div>姓名：{name}</div>\r\n                <div>年龄：{age}</div>\r\n                {/*循环渲染 */}\r\n                <div>\r\n                    {\r\n                        age.map((item,index)=>{\r\n                            if(index%2 === 0)\r\n                            return <p key={item}>{item}</p>\r\n                        })\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n//默认导出:只能导出一次,被引入时可以重命名。\r\n//export default ShowTime;\r\n\r\n//命名导出:可以导出多个\r\nexport {ShowTime};\r\nexport const num = 100;\r\nexport const num1 = 100;\r\nexport const num2 = 100;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <ul>\r\n                {\r\n                    todo.map((item,idx)=>\r\n                    <li key={idx}>\r\n                        {item}---<button onClick={(e)=>this.props.del(idx,e)}>删除</button>\r\n                    </li>)\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nTodoing.propTypes = {\r\n    todo:PropTypes.string,\r\n    del:PropTypes.func\r\n}\r\n\r\nTodoing.defaultProps = {\r\n    todo:[1,2,3,4]\r\n}","import React, { Component } from 'react'\r\n//受控组件：value值被react控制的表单元素\r\n//可以实时获取表单元素的值\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state={\r\n            a:'',\r\n            b:'',\r\n            c:''        \r\n        }\r\n\r\n    }\r\n    // handleInput(e){\r\n    //     if(e.keyCode === 13){\r\n    //         console.log(e.target.value);//获得输入的值\r\n    //         this.props.add();//调用这个属性的函数\r\n    //     }\r\n    // }\r\n    handleInput = (e) =>{\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind绑定\r\n        if(e.keyCode === 13){\r\n            //console.log(e.target.value);//获得输入的值\r\n            this.props.add(e.target.value);//调用这个属性的函数\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            // 必须加[],不然非法\r\n            [e.target.name]:parseInt(e.target.value===''?0:e.target.value)\r\n        })\r\n    }\r\n    //聚焦\r\n    componentDidMount(){\r\n        console.log(this.refs.a);\r\n        this.a.focus();\r\n    }\r\n    //render是个函数\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* state是当前数据存储数据的对象，改变数据要setstate */}\r\n                <input name=\"a\" ref={(inp)=>{this.a=inp}} onChange={this.handleChange} value={this.state.input} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.input} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.input} onKeyDown={this.handleInput} type=\"text\"/>                \r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n\r\n\r\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\"></input>\r\n                <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Todoing from './Todoing'\r\nimport Todoinput from './Todoinput'\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:[1,2,3],\r\n            a:100,\r\n            b:100\r\n        }\r\n    }\r\n    addItem = (data) => {\r\n        //this.state.todo.push(data);\r\n        this.setState({\r\n            todo:[...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem = (idx)=>{\r\n        //深拷贝、浅拷贝\r\n        /*\r\n        //法一：深拷贝：\r\n        var obj = {a:100,b:[1,2,3]}\r\n        var o = JSON.parse(JSON.stringify(obj));\r\n        o.b[0] = 200;\r\n        console.log(obj);\r\n        */\r\n       \r\n        /*\r\n        //法二：浅拷贝：\r\n        var obj = {a:100,b:[1,2,3]};\r\n        var obj1 = {c:300};\r\n        var o = Object.assign({},obj,obj1);\r\n        console.log(o);\r\n        */\r\n\r\n        /*\r\n        //遍历对象简便方法：\r\n        Object.keys(obj).forEach((item)=>{\r\n            console.log(item)\r\n            console.log(obj[item])\r\n        })\r\n        */\r\n\r\n        //法三：\r\n        //1.不能直接改变或处理state，通过setState改变\r\n        //console.log(idx);\r\n        let todo = [...this.state.todo]//拷贝\r\n        todo.splice(idx,1);\r\n        //2.setState是异步执行\r\n        //即使constructor有多个对象，setState修改一个对象，其他对象并不会受到影响。 \r\n        //在setState里获取state可能会出错，可以把第一个参数写成函数\r\n        /*1:\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);\r\n            return{\r\n                todo:todo\r\n            }\r\n        })\r\n        */\r\n\r\n        /*2:\r\n        this.setState({\r\n            todo:todo\r\n        },()=>{console.log(this.state.todo)})\r\n        */\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoing todo={this.state.todo} del={this.delItem}/>\r\n                <Todoinput add={this.addItem}/>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n","// import React,{Fragment,Component} from 'react';\nimport React,{Fragment} from 'react';\n// import React from 'react';\nimport ReactDOM from 'react-dom';\n//外部引入：\nimport ShowTime from './ShowTime';\nimport Todolist from './ToDolist/Todolist';\n//import './index.css';\n\n\n//只有被放进ReactDOM.render的组件才能看到\n//index.js引入Todolist组件，Todolist组件引进Todoinput和Todoing组件\nReactDOM.render(\n    <Todolist/>,//这是一个组件\n    document.getElementById('root')\n)\n\n\n/*\n//外部引入：\nvar num=[1,2,3,4,5];\nReactDOM.render(\n    <ShowTime age={num} name=\"zhangsan\"/>,\n    document.getElementById('root')\n)\n*/\n\n/*\nclass ShowTime extends Component{\n    constructor(){\n        super();\n        this.state = {\n            time:new Date().toLocaleString(),\n            a:100,\n            b:200\n        }\n        setInterval(()=>{\n            this.setState({\n                time:new Date().toLocaleString()\n            });\n        },1000)\n    }\n    shouldComponentUpdate(){\n        if(this.state.a>10){\n            return true;\n        }\n        return false;\n    }\n    componentDidUpdate(preProps,preState,data){\n        console.log('didupdate');\n        console.log(preProps,preState);\n    }\n    getSnapshotBeforeUpdate(){\n        console.log('getSnapshot');\n        return {name:this.state.a}\n    }\n    componentDidMount(){\n        console.log('didmount');\n    }\n    render(){\n        var {name,age} = this.props;\n        return (<Fragment>\n                    {/*条件渲染 三目运算符代替if语句，因为if只能在函数中用}\n                    {name.length>5?<div>姓名:{name}</div>:''}\n                    {name.length>5&&<div>姓名:{name}</div>}\n\n                    <div>{this.state.time}</div>\n                    <div>姓名:{name}</div>\n                    <div>年龄:{age}</div>\n                    {/*循环渲染}\n                    <div>\n                        {\n                            age.map((item,index)=>{\n                                if(index%2 === 0){return <p key={index}>{item}</p>}\n                               \n                            })\n                        }\n                    </div> \n                </Fragment>)\n    }\n}\nvar num=[1,2,3,4,5];\nReactDOM.render(\n    <ShowTime age={num} name=\"zhangsan\"/>,\n    document.getElementById('root')\n)\n\n*/\n\n//显示当前系统时间\n//变量都要用{}括起来\n/*\nfunction ShowTime(props){\n    console.log(props);\n    return (<Fragment>\n            <div>{props.name}</div>\n            <div>\n                {new Date().toLocaleString()}\n            </div></Fragment>)\n}\nvar num=20;\nReactDOM.render(\n    <ShowTime age={num} name=\"zhangsan\"/>,\n    document.getElementById('root')\n)\n*/\n\n/*\nfunction showTime(){\n    var ele = <div>\n        <p>当前时间是：</p>\n        <div>\n            {new Date().toLocaleString()}\n        </div>\n    </div>;\n    ReactDOM.render(ele,\n        document.querySelector('#root')\n    );\n}\nshowTime();\nsetInterval(showTime,1000);\n*/\n\n/*\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: [\n            'hello',\n            'react',\n            {\n                type: 'h1',\n                props: {\n                    id: 'tit',\n                    class: 'tit',\n                    children: [\n                        'title',\n                        'react'\n                    ]\n                }\n            }\n        ]\n    }\n}\nfunction render(obj,container){\n    var {type,props} = obj;\n    //文档碎片fragment\n    var fragment = document.createDocumentFragment();\n\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item]\n        }else if(item === 'children'){\n            for(var i=0;i<props.children.length;i++){\n                // ele.innerHTML += props.children[i];\n                if(typeof props.children[i] === 'object'){\n                    render(props.children[i],ele);\n                }else{\n                    var txt = document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(ele);\n}\nrender(obj,document.getElementById('root'));\n*/\n\n\n\n//页面渲染过程\n//请求HTML页面、浏览器HTML解析器解析html文件、生成DOM树\n//link引入css文件、css解析器解析css，生成css对象模型,CSSOM和DOM tree结合生成一个render tree,最后浏览器绘制页面\n\n//页面回流(重排reflow)引起的原因:DOM结构变化、内容变化、大小、位置的变化\n//页面重绘(repaint)引起的原因:颜色的变化(背景色、字体颜色、边框颜色)\n\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;\n// var ele = React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'t',class:'tit'},\n//         'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));\n\n/*\n//1.先用变量进行dom处理，最后一次渲染。\nconsole.time('time');\nvar div = document.getElementById('root');\nvar str = '';\nfor(var i=0;i<1000;i++){\n    str += '<p>'+i+'</p>';\n}\ndiv.innerHTML = str;\nconsole.timeEnd('time');\n*/\n\n/*\n//2.对于样式处理,声明一个css类\nvar div = document.getElementById('root');\n// div.style.width='200px';\n// div.style.height='100px';\n// div.style.background='red';//这种写法至少回流两次\n\n//css类：\n// .active{\n//     width='200px';\n//     height='100px';\n//     background='red';\n// }\ndiv.className = 'active';\n*/\n\n/*\n//3.offsetLeft、offsetWidth等都会引起回流\nconsole.log(div.offsetLeft);\nvar wid = div.offsetWidth;\nsetInterval(()=>{\n    wid += 1;\n    div.style.width = wid + 'px';\n},1000)\n*/\n\n\n//4."],"sourceRoot":""}